Containers
- mini-VM that has all the packages needed to run a single application

Virtual Machine
- self-explanatory but in this context the containers are run in these virtual machines in a many-to-one relationship
(many containers : one VM)

Docker
- allows developers to containerize an application so that it can run on any computer without needing
any setup aside from Docker's

Load Balancing
- it allowed a cluster of virtual machines to have unique processes so that not all of them are
working on the same user request for example.

Managing Clusters
- was a hassle pre-Kubernetes because each VM had its own operating system needed specifically for
each container.

Kubernetes
- Allowed an easy way to give instructions to a cluster such as: when to scale up, when to scale down,
what is the maximum size, what is the minimum size, etc. It also provided its own load balancer.

Node
- It is a group of containers. It is what is essentially a "VM" under Kubernetes

Cluster
- Group of Nodes. A cluster has its own load-balancer called a "Control Panel"

Control Pane
- Handles the requests of the Developer giving instructions using Kubernetes

Pod
- Not a container but a collection of containers under Kubernetes. It containes
storage, networking, and containers.

API Server
- A Control plane has an API controller that listens to request from
the Rancher port

Scheduler
- A Control plane has a scheduler that handles the requests from the API Server. This is essentially
the equivalent of the "load-balancer"

Initcontainer
- A container that tests connections, makes sures that user-defined conditions are true before running the containers

Rancher
- is a Kubernetes client/server that we use to interface with Kubernetes
