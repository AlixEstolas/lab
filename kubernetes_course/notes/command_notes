kubectl apply -f YAML_FILE.yaml
- this will create a new pod with your yaml configuration
- this will also update the existing pod if an edit is made

kubectl describe pod POD_NAME
- get pod info

kubectl get pods -o wide
- get all pods' info with IP addresses etc

kubectl get pods POD_NAME -o yaml
- -o means output, this command will output the yaml file of the pod

kubectl edit pods POD_NAME
- lets you edit the config of the pod

kubectl run IMAGE_NAME --image=IMAGE_TO_BE_USED --dry-run=[CLIENT/SERVER/NONE] -o yaml
- this will create a sample yaml file that we can
use to create an actual yaml file from scratch.
- Server will run it
on the cluster but will immediately remove it; this is useful
for figuring out missing values because it will spit out an error.
- Client will not run it but will only show the YAML
- PODS CAN ONLY USE RUN CANNOT CREATE A POD USING CREATE COMMAND

COMMAND > filename.extension
- this will output the text output onto a file
on your current directory.
-Example: kubectl run IMAGE_NAME --dry-run=[CLIENT/SERVER/NONE] -o yaml > filename.extension

kubectl delete pod POD_NAME
- delete pod

kubectl exec -it POD_NAME -- COMMANDS
- runs commands inside the pod

kubectl exec -it POD_NAME -- bash
- seems to work when /bin/bash or /bin/sh doesnt work. sh has some weird behavior so
let's use bash

apt install PACKAGE_NAME
- for installing things inside a pod

kubectl create deploy DEPLOYMENT_NAME --image=IMAGE_NAME --replicas:69
- creates a deployment
- a deployment is a set of pods whose number depends on --replicas and image depends on --image

kubectl get deployment.apps
- shows all deployments

kubectl get deployment.apps DEPLOYMENT_NAME -o yaml
- -o means output, this command will output the yaml file of the deployment

kubectl edit deployment.apps DEPLOYMENT_NAME
- lets you edit the config of the deployment

kubectl delete deployment.apps DEPLOYMENT_NAME
- delete deployment

kubectl get namespaces
- shows all namespaces

kubectl get namespaces NAMESPACE_NAME -o yaml
- -o means output, this command will output the yaml file of the namespace

kubectl create namespace [NAME]
- create namespace

kubectl config set-context --current --namespace=NAME_SPACE
- makes it so that the current context will always set the namespace as NAME_SPACE
- if have multiple contexts, replace --current with the actual name of the context:
example: kubectl config set-context CONTEXT_NAME --namespace=NAME_SPACE

kubectl port-forward pods/POD_NAME POD_PORT
- this will expose the port of the pod to your localhost

rdctl
- is the rancher desktop CLI. "The goal of this CLI is to enable any UI-based operation to be
done from the command-line as well."

rdctl shell bash
- allows the user to perform commands to the Nodes as if they are using the
rancher desktop UI
note: if bash does not work, use sh "rdctl shell sh"

rdctl shell sh -> cd etc/cni -> tree
- this allows you to see what CNI your current node is using for networking.

VIM COMMAND: :%s/STRING_TO_BE_REPLACED/NEW_STRING/g
- replace strings. g means "globally"

kubectl expose deployment DEPLOYMENT_NAME --port PORT_NUMBER
- this will expose the deployment as a SERVICE

kubectl get service SERVICE_NAME -o yaml
- -o means output, this command will output the yaml file of the service

kubectl delete service SERVICE_NAME
- deletes service

kubectl port-forward services/SERVICE_NAME PORT_NUMBER
- exposes the port of a service